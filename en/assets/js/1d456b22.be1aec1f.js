"use strict";(globalThis.webpackChunkblog=globalThis.webpackChunkblog||[]).push([[4629],{6012:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"\u4e2a\u4eba\u77e5\u8bc6\u5e93/\u8bed\u8a00\u77e5\u8bc6/Go/Go\u6a21\u5757\u5b66\u4e60/GoLang-goflags","title":"goflags","description":"[!Tip]","source":"@site/docs/\u4e2a\u4eba\u77e5\u8bc6\u5e93/05.\u8bed\u8a00\u77e5\u8bc6/03.Go/02.Go\u6a21\u5757\u5b66\u4e60/03.GoLang-goflags.md","sourceDirName":"\u4e2a\u4eba\u77e5\u8bc6\u5e93/05.\u8bed\u8a00\u77e5\u8bc6/03.Go/02.Go\u6a21\u5757\u5b66\u4e60","slug":"/\u4e2a\u4eba\u77e5\u8bc6\u5e93/\u8bed\u8a00\u77e5\u8bc6/Go/Go\u6a21\u5757\u5b66\u4e60/GoLang-goflags","permalink":"/en/docs/\u4e2a\u4eba\u77e5\u8bc6\u5e93/\u8bed\u8a00\u77e5\u8bc6/Go/Go\u6a21\u5757\u5b66\u4e60/GoLang-goflags","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/\u4e2a\u4eba\u77e5\u8bc6\u5e93/05.\u8bed\u8a00\u77e5\u8bc6/03.Go/02.Go\u6a21\u5757\u5b66\u4e60/03.GoLang-goflags.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"GoLand-net.http","permalink":"/en/docs/\u4e2a\u4eba\u77e5\u8bc6\u5e93/\u8bed\u8a00\u77e5\u8bc6/Go/Go\u6a21\u5757\u5b66\u4e60/GoLand-net.http"},"next":{"title":"CVE-2022-26134","permalink":"/en/docs/\u4e2a\u4eba\u77e5\u8bc6\u5e93/\u8bed\u8a00\u77e5\u8bc6/Go/Go\u4ee3\u7801\u6848\u4f8b/GoLang-\u7f16\u5199POC/GoLang-CVE-2022-26134"}}');var s=t(4848),r=t(8453);const l={},o="goflags",a={},d=[{value:"Features",id:"features",level:2},{value:"Usage",id:"usage",level:2},{value:"Flag Types",id:"flag-types",level:3},{value:"String Slice Options",id:"string-slice-options",level:3},{value:"Example",id:"example",level:2},{value:"Thanks",id:"thanks",level:3}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"goflags",children:"goflags"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"[!Tip]"}),"\n",(0,s.jsx)(n.p,{children:"\u672c\u7bc7\u6587\u7ae0\u53c2\u8003\u5982\u4e0b\uff0c\u5982\u6709\u4fb5\u6743\uff0c\u8bf7\u8054\u7cfb\u6211\u5220\u9664\u3002"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/projectdiscovery/goflags",children:"\u7b2c\u4e09\u5341\u516d\u7ae0 net/http\u5305 \xb7 Go \u8bed\u8a00 42 \u7ae0\u7ecf"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"LICENSE.md",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/github/license/projectdiscovery/goflags",alt:"License"})}),"\n",(0,s.jsx)(n.img,{src:"https://img.shields.io/github/go-mod/go-version/projectdiscovery/nuclei?filename=v2%2Fgo.mod",alt:"Go version"}),"\n",(0,s.jsx)(n.a,{href:"https://github.com/projectdiscovery/goflags/releases/",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/github/release/projectdiscovery/goflags",alt:"Release"})}),"\n",(0,s.jsx)(n.a,{href:"https://github.com/projectdiscovery/goflags/actions/workflows/build-test.yml",children:(0,s.jsx)(n.img,{src:"https://github.com/projectdiscovery/goflags/actions/workflows/build-test.yml/badge.svg",alt:"Checks"})})]}),"\n",(0,s.jsxs)(n.p,{children:["An extension of the go ",(0,s.jsx)(n.code,{children:"flag"})," library that adds convenience functions and functionalities like config file, better usage, short and long flag support, custom types for string slices and maps etc."]}),"\n",(0,s.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"In-built YAML Configuration file support."}),"\n",(0,s.jsx)(n.li,{children:"Better usage instructions"}),"\n",(0,s.jsx)(n.li,{children:"Short and long flags support"}),"\n",(0,s.jsx)(n.li,{children:"Custom String Slice types with different options (comma-separated,normalized,etc)"}),"\n",(0,s.jsx)(n.li,{children:"Custom Map type"}),"\n",(0,s.jsx)(n.li,{children:"Flags grouping support (CreateGroup,SetGroup)"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsxs)(n.p,{children:["The following types are supported by the goflags library. The ",(0,s.jsx)(n.code,{children:"<name>P"})," suffix means that the flag supports both a long and a short flag for the option."]}),"\n",(0,s.jsx)(n.h3,{id:"flag-types",children:"Flag Types"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Function"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"BoolVar"}),(0,s.jsx)(n.td,{children:"Boolean value with long name"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"BoolVarP"}),(0,s.jsx)(n.td,{children:"Boolean value with long short name"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"DurationVar"}),(0,s.jsx)(n.td,{children:"Time Duration value with long name"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"DurationVarP"}),(0,s.jsx)(n.td,{children:"Time Duration value with long short name"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"IntVar"}),(0,s.jsx)(n.td,{children:"Integer value with long name"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"IntVarP"}),(0,s.jsx)(n.td,{children:"Integer value with long short name"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"PortVar"}),(0,s.jsx)(n.td,{children:"Port value with long name"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"PortVarP"}),(0,s.jsx)(n.td,{children:"Port value with long short name"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"RuntimeMapVar"}),(0,s.jsx)(n.td,{children:"Map value with long name"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"RuntimeMapVarP"}),(0,s.jsx)(n.td,{children:"Map value with long short name"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"StringSliceVar"}),(0,s.jsx)(n.td,{children:"String Slice value with long name and options"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"StringSliceVarConfigOnly"}),(0,s.jsx)(n.td,{children:"String Slice value with long name read from config file only"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"StringSliceVarP"}),(0,s.jsx)(n.td,{children:"String slice value with long short name and options"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"StringVar"}),(0,s.jsx)(n.td,{children:"String value with long name"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"StringVarEnv"}),(0,s.jsx)(n.td,{children:"String value with long short name read from environment"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"StringVarP"}),(0,s.jsx)(n.td,{children:"String value with long short name"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Var"}),(0,s.jsx)(n.td,{children:"Custom value with long name implementing flag.Value interface"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"VarP"}),(0,s.jsx)(n.td,{children:"Custom value with long short name implementing flag.Value interface"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"EnumVar"}),(0,s.jsx)(n.td,{children:"Enum value with long name"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"EnumVarP"}),(0,s.jsx)(n.td,{children:"Enum value with long short name"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"string-slice-options",children:"String Slice Options"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"String Slice Option"}),(0,s.jsx)(n.th,{children:"Tokenization"}),(0,s.jsx)(n.th,{children:"Normalization"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"StringSliceOptions"}),(0,s.jsx)(n.td,{children:"None"}),(0,s.jsx)(n.td,{children:"None"}),(0,s.jsx)(n.td,{children:"Default String Slice"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"CommaSeparatedStringSliceOptions"}),(0,s.jsx)(n.td,{children:"Comma"}),(0,s.jsx)(n.td,{children:"None"}),(0,s.jsx)(n.td,{children:"Comma-separated string slice"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"FileCommaSeparatedStringSliceOptions"}),(0,s.jsx)(n.td,{children:"Comma"}),(0,s.jsx)(n.td,{children:"None"}),(0,s.jsx)(n.td,{children:"Comma-separated items from file/cli"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"NormalizedOriginalStringSliceOptions"}),(0,s.jsx)(n.td,{children:"None"}),(0,s.jsx)(n.td,{children:"Standard"}),(0,s.jsx)(n.td,{children:"List of normalized string slice"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"FileNormalizedStringSliceOptions"}),(0,s.jsx)(n.td,{children:"Comma"}),(0,s.jsx)(n.td,{children:"Standard"}),(0,s.jsx)(n.td,{children:"List of normalized string slice from file/cli"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"FileStringSliceOptions"}),(0,s.jsx)(n.td,{children:"Standard"}),(0,s.jsx)(n.td,{children:"Standard"}),(0,s.jsx)(n.td,{children:"List of string slice from file"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"NormalizedStringSliceOptions"}),(0,s.jsx)(n.td,{children:"Comma"}),(0,s.jsx)(n.td,{children:"Standard"}),(0,s.jsx)(n.td,{children:"List of normalized string slice"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.p,{children:"An example showing various options of the library is specified below."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\t"log"\n\n\t"github.com/projectdiscovery/goflags"\n)\n\ntype options struct {\n\tsilent bool\n\tinputs goflags.StringSlice\n\tconfig string\n\tvalues goflags.RuntimeMap\n}\n\nconst (\n\tNil goflags.EnumVariable = iota\n\tType1\n\tType2\n)\n\nfunc main() {\n\tenumAllowedTypes := goflags.AllowdTypes{"type1": Type1, "type2": Type2}\n\topt := &options{}\n\n\tflagSet := goflags.NewFlagSet()\n\tflagSet.SetDescription("Test program to demonstrate goflags options")\n\n\tflagSet.EnumVarP(&options.Type, "enum-type", "et", Nil, "Variable Type (type1/type2)", enumAllowedTypes)\n\tflagSet.BoolVar(&opt.silent, "silent", true, "show silent output")\n\tflagSet.StringSliceVarP(&opt.inputs, "inputs", "i", nil, "list of inputs (file,comma-separated)", goflags.FileCommaSeparatedStringSliceOptions)\n\n\t// Group example\n\tflagSet.CreateGroup("config", "Configuration",\n\t\tflagSet.StringVar(&opt.config, "config", "", "file to read config from"),\n\t\tflagSet.RuntimeMapVar(&opt.values, "values", nil, "key-value runtime values"),\n\t)\n\tif err := flagSet.Parse(); err != nil {\n\t\tlog.Fatalf("Could not parse flags: %s\\n", err)\n\t}\n\tif opt.config != "" {\n\t\tif err := flagSet.MergeConfigFile(opt.config); err != nil {\n\t\t\tlog.Fatalf("Could not merge config file: %s\\n", err)\n\t\t}\n\t}\n\tfmt.Printf("silent: %v inputs: %v config: %v values: %v\\n", opt.silent, opt.inputs, opt.config, opt.values)\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"thanks",children:"Thanks"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"spf13/cobra - For the very nice usage template for the command line."}),"\n",(0,s.jsx)(n.li,{children:"nmap/nmap - For the service-port mapping and top-ports list."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var i=t(6540);const s={},r=i.createContext(s);function l(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);